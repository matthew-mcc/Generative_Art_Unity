// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel Start
#pragma kernel Update
#pragma kernel Display
// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture

RWTexture2D<float4> currentGrid;
RWTexture2D<float4> nextGrid;
RWTexture2D<float4> displayGrid;

Texture2D<float4> initMap;

// Parameters from karl sims (using the Gray-Scott model)
float deltaTime;
int width;
int height;

float feedRate;
float killRate;

float diffusionRateA;
float diffusionRateB;

int colorMode;
int directionalMode;
int numberDirectionalSegments; // default 20
float directionalBiasModifier; // default 0.005


// 0 = square, 1 = circle, 2 = 3 squares, 3 = line, 4 = triangle
int initialMapMode;


int orientationDirection = 0; 
float2 diffusionDirection = float2(1, 1);


// Initialization kernel
[numthreads(8,8,1)]
void Start (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= width || id.y >= height){
        return;
    }

    // This works, need to create some initial maps tho...
    // float4 initVals = initMap[id.xy];
    // currentGrid[id.xy] = float4(1, initVals.r, 0, 0);
    
    float4 cell = float4(1.0, 0.0, 0.0, 0.0); // float4(A, B, 0, 0)

    // initialMapMode = 4;

    // Single Square
    if (initialMapMode == 0){
        // Add a small amount of B for reaction to start
        int centerX = width / 2;
        int centerY = height / 2;
        int sideLength = 15;
        if ((id.x > centerX - sideLength && id.x < centerX + sideLength) && (id.y > centerY - sideLength && id.y < centerY + sideLength)) {
            cell.y = 1.0;
        }

        currentGrid[id.xy] = cell;
    }

    // Single Circle
    if (initialMapMode == 1){
        // Add a small amount of B for reaction to start
        float centerX = width / 2.0; // Ensure floating-point division
        float centerY = height / 2.0; // Ensure floating-point division
        float radius = 15.0;

        float dx = id.x - centerX; // id.x and id.y need to be treated as floats
        float dy = id.y - centerY;

        // Check if the cell is within the circle
        if ((dx * dx) + (dy * dy) < (radius * radius)) {
            cell.y = 1.0;
        }

        currentGrid[id.xy] = cell;
    }

    // 3 diagonal squares
    if (initialMapMode == 2){
        // Define 3 initial squares
        int2 centers[3] = { int2(width / 2, height / 2), int2(width / 4, height / 4), int2(3 * width / 4, 3 * height / 4) };
        int regionSize = 5;

        // Check each region for initialization of B concentration
        for (int i = 0; i < 3; i++) {
            int centerX = centers[i].x;
            int centerY = centers[i].y;
            if ((id.x > centerX - regionSize && id.x < centerX + regionSize) &&
                (id.y > centerY - regionSize && id.y < centerY + regionSize)) {
                cell.y = 1.0;  // Initialize B for reaction
                break;         // Exit once one region is assigned
            }
        }

        currentGrid[id.xy] = cell;
    }

    // line
    if(initialMapMode == 3){
        int centerX = width / 2;
        int centerY = height / 2;

        if ((id.x > centerX - 15 && id.x < centerX + 15) && (id.y > centerY - 200 && id.y < centerY + 200)) {
            cell.y = 1.0;
        }

        currentGrid[id.xy] = cell;
    }

    // Triangle
    if (initialMapMode == 4) {
        // Define the triangle vertices
        float2 center = float2(width / 2.0, height / 2.0);
        
        float2 v0_original = float2(width / 2.0, 3.0 * height / 4.0);      // Top vertex
        float2 v1_original = float2(width / 4.0, height / 4.0); // Bottom-left vertex
        float2 v2_original = float2(3.0 * width / 4.0, height / 4.0); // Bottom-right vertex

        // Apply scaling factor to make the triangle smaller
        float scale = 0.25; // Scale factor (0.0 to 1.0, where 1.0 is original size)
        float2 v0 = lerp(center, v0_original, scale);
        float2 v1 = lerp(center, v1_original, scale);
        float2 v2 = lerp(center, v2_original, scale);

        // Calculate barycentric coordinates for point-in-triangle test
        float2 p = float2(id.x, id.y);
        float area = abs((v1.x - v0.x) * (v2.y - v0.y) - (v2.x - v0.x) * (v1.y - v0.y)); // Total triangle area
        float area1 = abs((v1.x - p.x) * (v2.y - p.y) - (v2.x - p.x) * (v1.y - p.y));   // Sub-triangle 1
        float area2 = abs((v2.x - p.x) * (v0.y - p.y) - (v0.x - p.x) * (v2.y - p.y));   // Sub-triangle 2
        float area3 = abs((v0.x - p.x) * (v1.y - p.y) - (v1.x - p.x) * (v0.y - p.y));   // Sub-triangle 3

        // Check if point is within the triangle
        if (abs(area - (area1 + area2 + area3)) < 1e-5) {
            cell.y = 1.0;  // Initialize B for reaction
        }

        currentGrid[id.xy] = cell;
    }

    /*
    // Define 3 initial squares
        int2 centers[3] = { int2(width / 2, height / 2), int2(width / 4, height / 4), int2(3 * width / 4, 3 * height / 4) };
        int regionSize = 5;

        // Check each region for initialization of B concentration
        for (int i = 0; i < 3; i++) {
            int centerX = centers[i].x;
            int centerY = centers[i].y;
            if ((id.x > centerX - regionSize && id.x < centerX + regionSize) &&
                (id.y > centerY - regionSize && id.y < centerY + regionSize)) {
                cell.y = 1.0;  // Initialize B for reaction
                break;         // Exit once one region is assigned
            }
        }

        currentGrid[id.xy] = cell;
    */

    // 15 random points
    if (initialMapMode == 5){
        // Define constants for pseudo-random number generation
        int regionSize = 2; // Size of each region
        int numPoints = 15; // Number of random points
        int2 randomPoints[15];

        // Generate pseudo-random points
        for (int i = 0; i < numPoints; i++) {
            uint seedX = (i + 1) * 73856093; // Use a unique multiplier for each point
            uint seedY = (i + 1) * 19349663; // Use a unique multiplier for each point
            randomPoints[i] = int2(
                (seedX % width), // Generate pseudo-random X
                (seedY % height) // Generate pseudo-random Y
            );
        }

        // Check each random point for initialization of B concentration
        for (int i = 0; i < numPoints; i++) {
            int centerX = randomPoints[i].x;
            int centerY = randomPoints[i].y;
            if ((id.x > centerX - regionSize && id.x < centerX + regionSize) &&
                (id.y > centerY - regionSize && id.y < centerY + regionSize)) {
                cell.y = 1.0; // Initialize B for reaction
                break;        // Exit once one region is assigned
            }
        }

        currentGrid[id.xy] = cell;
    }

    return;

    

}





[numthreads(8,8,1)]
void Update (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= width || id.y >= height) {
        return;
    }
    
    float2 gridCenter = float2(width / 2.0, height / 2.0);
    float2 currentPos = float2(id.x, id.y);
    
    float varyingKillRate;
    
    // None
    if (directionalMode == 0){
        varyingKillRate = killRate;
    }
    
    // Linear - horizontal
    else if (directionalMode == 1){
        float columnWidth = width / numberDirectionalSegments;
        varyingKillRate = (fmod(currentPos.y, columnWidth) < (columnWidth / 2.0)) ? killRate : killRate + directionalBiasModifier;
    }
    // Linear - vertical
    else if (directionalMode == 2){
        float columnWidth = width / numberDirectionalSegments;
        varyingKillRate = (fmod(currentPos.x, columnWidth) < (columnWidth / 2.0)) ? killRate : killRate + directionalBiasModifier;
    }
    // Linear - diagonal
    else if (directionalMode == 3){
        float columnWidth = width / numberDirectionalSegments;
        varyingKillRate = (fmod(currentPos.x + currentPos.y, columnWidth) < (columnWidth / 2.0)) ? killRate : killRate + directionalBiasModifier;
    }
    // Radial
    else if (directionalMode == 4){
        float distanceFromCenter = length(currentPos - gridCenter);
        float maxDistance = length(gridCenter);
        float normalizedDistance = distanceFromCenter / maxDistance;
        varyingKillRate = lerp(killRate, killRate + directionalBiasModifier, normalizedDistance);
    }
    // Sinusoidal
    else if (directionalMode == 5){
        float wavelength = width / 10.0;
        varyingKillRate = lerp(killRate, killRate + directionalBiasModifier, 0.5 * (sin(currentPos.x * (2.0 * 3.14159 / wavelength)) + 1.0));

    }

    float2 uv = currentGrid[id.xy].xy;
    float a = uv.x;
    float b = uv.y;


    // // Laplacian using 3x3 convolution kernel
    float laplaceA = 
        -1.0 * a +
        0.2 * (currentGrid[int2(id.x - 1, id.y)].x + currentGrid[int2(id.x + 1, id.y)].x +
        currentGrid[int2(id.x, id.y - 1)].x + currentGrid[int2(id.x, id.y + 1)].x) +
        0.05 * (currentGrid[int2(id.x - 1, id.y - 1)].x + currentGrid[int2(id.x - 1, id.y + 1)].x +
        currentGrid[int2(id.x + 1, id.y - 1)].x + currentGrid[int2(id.x + 1, id.y + 1)].x);

    float laplaceB = 
        -1.0 * b +
        0.2 * (currentGrid[int2(id.x - 1, id.y)].y + currentGrid[int2(id.x + 1, id.y)].y +
        currentGrid[int2(id.x, id.y - 1)].y + currentGrid[int2(id.x, id.y + 1)].y) +
        0.05 * (currentGrid[int2(id.x - 1, id.y - 1)].y + currentGrid[int2(id.x - 1, id.y + 1)].y +
        currentGrid[int2(id.x + 1, id.y - 1)].y + currentGrid[int2(id.x + 1, id.y + 1)].y);

    // Reaction-diffusion equations
    float dA = diffusionRateA * laplaceA - a * b * b + feedRate * (1.0 - a);
    float newA = a + dA;
    float dB = diffusionRateB * laplaceB + a * b * b - (feedRate + varyingKillRate) * b;
    float newB = b + dB;


    nextGrid[id.xy] = float4(max(0, newA), min(newB, 1), dA, dB);
    
    
    
}

[numthreads(8, 8, 1)]
void Display (uint3 id : SV_DispatchThreadID){
    if (id.x >= width || id.y >= height){
        return;
    }

    float4 m = currentGrid[id.xy];
    // displayGrid[id.xy] = m;

    float colorA = nextGrid[id.xy].x;
    float colorB = nextGrid[id.xy].y;
    float colorW = nextGrid[id.xy].w;
    float colorZ = nextGrid[id.xy].z;
    
    const float colorZThreshold = 0.0005;
    colorZ = max(0, colorZ - colorZThreshold);
    // Standard
    if (colorMode == 0){
        displayGrid[id.xy] =  m;
    }

    // Black and White
    else if (colorMode == 1){
        displayGrid[id.xy] = colorA - colorB;
    }

    // Sebastian Lague Color
    else if (colorMode == 2){
        float v = colorA - colorB;

        displayGrid[id.xy] = (1 - pow(abs(1 - (v + 1 - max(colorZ, colorW) * 350)), 0.15)) + float4(colorW, 0, 0, 0) * 750;
    }

    // Sebastian Lague Color 2.0
    else if (colorMode == 3){
        float4 col = float4(colorZ * 350, colorW * 250, 0, 0) + float4(0, 0, colorB, 0);
        col = col.gbra;
        col.g = pow(col.g, 2) * 6;
        col = min(1, max(0, col));
        displayGrid[id.xy] = col;
    }

    // Fiery glow mode
    else if (colorMode == 4){
        float intensity = colorA - colorB; 
        float glow = saturate(colorW * 6.0 + colorZ * 3.0);

        // Map intensity to a fiery palette (red, orange, yellow)
        float red = saturate(intensity * 20 + glow * 5);
        float green = saturate(intensity * 0.8 + glow * 0.5);
        float blue = saturate(glow * 0.2);
            
        displayGrid[id.xy] = float4(red, green, blue, 1.0);
    }

    // Ice Mode
    else if (colorMode == 5){
        float intensity = colorA - colorB; // Base intensity for contrast
        float glow = saturate(colorW * 100.0 + colorZ * 100.0); // Amplify W and Z for brightness

        float red = saturate(intensity * 0.5 + glow * 0.9);
        float green = saturate(intensity * 0.3 + glow * 0.6);
        float blue = saturate(glow * 5);

        // Add sharp contrast for the "electric" look
        displayGrid[id.xy] = pow(float4(red, green, blue, 2.0), float4(1, 0.2, 0, 1.0));
    }
}