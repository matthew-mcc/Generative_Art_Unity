// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel Start
#pragma kernel Update
// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture

RWTexture2D<float4> currentGrid;
RWTexture2D<float4> nextGrid;
RWTexture2D<float4> displayGrid;

Texture2D<float4> initMap;

// Parameters from karl sims (using the Gray-Scott model)
float deltaTime;
int width;
int height;

float feedRate;
float killRate;

float diffusionRateA;
float diffusionRateB;

int colorMode;
int directionalMode;
int numberDirectionalSegments; // default 20
float directionalBiasModifier; // default 0.005


// 0 = square, 1 = circle, 2 = 3 squares, 3 = line, 4 = triangle
int initialMapMode;


int orientationDirection = 0; 
float2 diffusionDirection = float2(1, 1);


// Initialization kernel
[numthreads(8,8,1)]
void Start (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= width || id.y >= height){
        return;
    }

    // This works, need to create some initial maps tho...
    // float4 initVals = initMap[id.xy];
    // currentGrid[id.xy] = float4(1, initVals.r, 0, 0);
    
    float4 cell = float4(1.0, 0.0, 0.0, 0.0); // float4(A, B, 0, 0)

    // initialMapMode = 4;

    // Single Square
    if (initialMapMode == 0){
        // Add a small amount of B for reaction to start
        int centerX = width / 2;
        int centerY = height / 2;

        if ((id.x > centerX - 15 && id.x < centerX + 15) && (id.y > centerY - 15 && id.y < centerY + 15)) {
            cell.y = 1.0;
        }

        currentGrid[id.xy] = cell;
    }

    // Single Circle
    if (initialMapMode == 1){
        // Add a small amount of B for reaction to start
        float centerX = width / 2.0; // Ensure floating-point division
        float centerY = height / 2.0; // Ensure floating-point division
        float radius = 15.0;

        float dx = id.x - centerX; // id.x and id.y need to be treated as floats
        float dy = id.y - centerY;

        // Check if the cell is within the circle
        if ((dx * dx) + (dy * dy) < (radius * radius)) {
            cell.y = 1.0;
        }

        currentGrid[id.xy] = cell;
    }

    // 3 diagonal squares
    if (initialMapMode == 2){
        // Define 3 initial squares
        int2 centers[3] = { int2(width / 2, height / 2), int2(width / 4, height / 4), int2(3 * width / 4, 3 * height / 4) };
        int regionSize = 5;

        // Check each region for initialization of B concentration
        for (int i = 0; i < 3; i++) {
            int centerX = centers[i].x;
            int centerY = centers[i].y;
            if ((id.x > centerX - regionSize && id.x < centerX + regionSize) &&
                (id.y > centerY - regionSize && id.y < centerY + regionSize)) {
                cell.y = 1.0;  // Initialize B for reaction
                break;         // Exit once one region is assigned
            }
        }

        currentGrid[id.xy] = cell;
    }

    // line
    if(initialMapMode == 3){
        int centerX = width / 2;
        int centerY = height / 2;

        if ((id.x > centerX - 15 && id.x < centerX + 15) && (id.y > centerY - 200 && id.y < centerY + 200)) {
            cell.y = 1.0;
        }

        currentGrid[id.xy] = cell;
    }

    // Triangle
    if (initialMapMode == 4) {
        // Define the triangle vertices
        float2 center = float2(width / 2.0, height / 2.0);
        
        float2 v0_original = float2(width / 2.0, 3.0 * height / 4.0);      // Top vertex
        float2 v1_original = float2(width / 4.0, height / 4.0); // Bottom-left vertex
        float2 v2_original = float2(3.0 * width / 4.0, height / 4.0); // Bottom-right vertex

        // Apply scaling factor to make the triangle smaller
        float scale = 0.25; // Scale factor (0.0 to 1.0, where 1.0 is original size)
        float2 v0 = lerp(center, v0_original, scale);
        float2 v1 = lerp(center, v1_original, scale);
        float2 v2 = lerp(center, v2_original, scale);

        // Calculate barycentric coordinates for point-in-triangle test
        float2 p = float2(id.x, id.y);
        float area = abs((v1.x - v0.x) * (v2.y - v0.y) - (v2.x - v0.x) * (v1.y - v0.y)); // Total triangle area
        float area1 = abs((v1.x - p.x) * (v2.y - p.y) - (v2.x - p.x) * (v1.y - p.y));   // Sub-triangle 1
        float area2 = abs((v2.x - p.x) * (v0.y - p.y) - (v0.x - p.x) * (v2.y - p.y));   // Sub-triangle 2
        float area3 = abs((v0.x - p.x) * (v1.y - p.y) - (v1.x - p.x) * (v0.y - p.y));   // Sub-triangle 3

        // Check if point is within the triangle
        if (abs(area - (area1 + area2 + area3)) < 1e-5) {
            cell.y = 1.0;  // Initialize B for reaction
        }

        currentGrid[id.xy] = cell;
    }

    return;

    

}

float CalculateLaplacianA(int2 id) {
    // 3x3 convolution weights for Laplacian
    float4 center = currentGrid[id.xy];
    float a = center.x;
    
    float laplacianA = -a; // Center weight is -1
    
    // Define offsets for 3x3 neighborhood
    int2 offsets[8] = {
        int2(0, 1),    // up
        int2(1, 0),    // right
        int2(0, -1),   // down
        int2(-1, 0),   // left
        int2(1, 1),    // up-right
        int2(-1, 1),   // up-left
        int2(1, -1),   // down-right
        int2(-1, -1)   // down-left
    };
    
    float weights[8] = {0.2, 0.2, 0.2, 0.2, 0.05, 0.05, 0.05, 0.05};
    
    // Accumulate weighted sum of neighbors
    for (int i = 0; i < 8; i++) {
        int2 neighborPos = id + offsets[i];
        float sqrDst = offsets[i].x * offsets[i].x * offsets[i].y * offsets[i].y;
        neighborPos = clamp(neighborPos, int2(0, 0), int2(width - 1, height - 1));
        laplacianA += currentGrid[neighborPos].x * weights[i];
        
    }

    return laplacianA;
}

float CalculateLaplacianB(int2 id) {
    // 3x3 convolution weights for Laplacian
    float4 center = currentGrid[id.xy];
    float b = center.y;
    
    float laplacianB = -b; // Center weight is -1
    
    // Define offsets for 3x3 neighborhood
    int2 offsets[8] = {
        int2(0, 1),    // up
        int2(1, 0),    // right
        int2(0, -1),   // down
        int2(-1, 0),   // left
        int2(1, 1),    // up-right
        int2(-1, 1),   // up-left
        int2(1, -1),   // down-right
        int2(-1, -1)   // down-left
    };
    
    float weights[8] = {0.2, 0.2, 0.2, 0.2, 0.05, 0.05, 0.05, 0.05};
    
    // Accumulate weighted sum of neighbors
    for (int i = 0; i < 8; i++) {
        int2 neighborPos = id + offsets[i];
        neighborPos = clamp(neighborPos, int2(0, 0), int2(width - 1, height - 1));
        laplacianB += currentGrid[neighborPos].y * weights[i];
    }

    return laplacianB;
}



[numthreads(8,8,1)]
void Update (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= width || id.y >= height) {
        return;
    }
    
    float2 gridCenter = float2(width / 2.0, height / 2.0);
    float2 currentPos = float2(id.x, id.y);
    
    float varyingKillRate;
    
    // None
    if (directionalMode == 0){
        varyingKillRate = killRate;
    }
    
    // Linear - horizontal
    else if (directionalMode == 1){
        float columnWidth = width / numberDirectionalSegments;
        varyingKillRate = (fmod(currentPos.y, columnWidth) < (columnWidth / 2.0)) ? killRate : killRate + directionalBiasModifier;
    }
    // Linear - vertical
    else if (directionalMode == 2){
        float columnWidth = width / numberDirectionalSegments;
        varyingKillRate = (fmod(currentPos.x, columnWidth) < (columnWidth / 2.0)) ? killRate : killRate + directionalBiasModifier;
    }
    // Linear - diagonal
    else if (directionalMode == 3){
        float columnWidth = width / numberDirectionalSegments;
        varyingKillRate = (fmod(currentPos.x + currentPos.y, columnWidth) < (columnWidth / 2.0)) ? killRate : killRate + directionalBiasModifier;
    }
    // Radial
    else if (directionalMode == 4){
        float distanceFromCenter = length(currentPos - gridCenter);
        float maxDistance = length(gridCenter);
        float normalizedDistance = distanceFromCenter / maxDistance;
        varyingKillRate = lerp(killRate, killRate + directionalBiasModifier, normalizedDistance);
    }
    // Sinusoidal
    else if (directionalMode == 5){
        varyingKillRate = lerp(killRate, killRate + directionalBiasModifier, 0.5 * (sin(currentPos.x * 0.5) + 1.0)); // Adjust 0.1 for wavelength
    }

    
    // Get current A, B values
    float2 currentValues = currentGrid[id.xy].xy;
    float a = currentValues.x;
    float b = currentValues.y;
    
    // Calculate Laplacians for A and B
    float laplacianA = CalculateLaplacianA(id.xy);
    float laplacianB = CalculateLaplacianB(id.xy);
    
    // Gray-Scott reaction-diffusion equations with varying kill rate
    float reaction = a * b * b;
    float diffA = (diffusionRateA * laplacianA - reaction + feedRate * (1.0 - a));
    float diffB = (diffusionRateB * laplacianB + reaction - (varyingKillRate + feedRate) * b);
    
    // Update concentrations
    float newA = a + diffA;
    float newB = b + diffB;
    
    // Update next grid state
    nextGrid[id.xy] = float4(max(0, newA), min(newB, 1), diffA, diffB);
    
    
    float colorA = nextGrid[id.xy].x;
    float colorB = nextGrid[id.xy].y;
    float colorW = nextGrid[id.xy].w;
    float colorZ = nextGrid[id.xy].z;
    
    // Standard
    if (colorMode == 0){
        displayGrid[id.xy] = currentGrid[id.xy];
    }

    // Black and White
    else if (colorMode == 1){
        displayGrid[id.xy] = colorA - colorB;
    }

    // Sebastian Lague Color
    else if (colorMode == 2){
        float v = colorA - colorB;

        displayGrid[id.xy] = (1 - pow(abs(1 - (v + 1 - max(colorW, colorZ) * 350)), 0.6)) + float4(colorW, 0, 0, 0) * 400;
    }

    // Sebastian Lague Color 2.0
    else if (colorMode == 3){
        float4 col = float4(colorZ * 350, colorW * 250, 0, 0) + float4(0, 0, colorB, 0);
        col = col.gbra;
        col.g = pow(col.g, 2) * 6;
        col = min(1, max(0, col));
        displayGrid[id.xy] = col;
    }
}