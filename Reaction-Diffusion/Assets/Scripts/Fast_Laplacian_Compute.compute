// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;
int width;
int height;
StructuredBuffer<int> aggregateMap;

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // Get the 2D coordinates of this thread
    uint x = id.x;
    uint y = id.y;

    // Check if the coordinates are within texture bounds
    if (x < width && y < height)
    {
        // Calculate the 1D index in the aggregateMap buffer
        int index = y * width + x;
        
        // Determine color based on the aggregateMap value
        float4 color = aggregateMap[index] > 0 ? float4(1, 1, 1, 1) : float4(0, 0, 0, 1);

        // Write to the output texture
        Result[id.xy] = color;
    }
}
