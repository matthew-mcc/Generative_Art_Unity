// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;
int width;
int height;
StructuredBuffer<int> aggregateMap;

int seedX;
int seedY; 
float4 colorA;               // Customizable colors
float4 colorB;


[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // Get the 2D coordinates of this thread
    uint x = id.x;
    uint y = id.y;

    // Check if the coordinates are within texture bounds
    if (x < width && y < height)
    {
        // Calculate the 1D index in the aggregateMap buffer
        int index = y * width + x;
        float4 color = float4(0, 0, 0, 1);
        // Determine color based on the aggregateMap value
        // float4 color = aggregateMap[index] > 0 ? float4(1, 1, 1, 1) : float4(0, 0, 0, 1); // black / white
        float gradientScale = 0.35;
        if (aggregateMap[index] > 0){
            float dx = (float)x - seedX;
            float dy = (float)y - seedY;
            float distance = sqrt(dx * dx + dy * dy);

            // Normalize distance based on the scaled maximum distance
            float maxDistance = sqrt(width * width + height * height) * gradientScale; // Adjust range
            float normalizedDistance = saturate(distance / maxDistance);

            // Map normalized distance to the color gradient
            color = lerp(colorA, colorB, normalizedDistance);
        }

        // Write to the output texture
        Result[id.xy] = color;
    }
}
